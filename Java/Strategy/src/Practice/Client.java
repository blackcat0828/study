package Practice;
/*
문제점
 1. 기존 로봇의 공격 또는 이동 방법을 수정하려면 어떤 변경 작업을 해야 하는가?
    예를 들어 아톰이 날 수는 없고 오직 걷게만 만들고 싶다면? 또는 태권V를 날게 하려면?

 2. 새로운 로봇을 만들어 기존의 공격 또는 이동 방법을 추가하거나 수정하려면?
    예를 들어 새로운 로봇으로 지구의 용사 선가드(Sungard 클래스)를 만들어 태권V의 미사일 공격 기능을 추가하려면?

해결책
로봇 설계에서의 문제를 해결하려면 무엇이 변화되었는지 찾아야 한다. 변화된 것을 찾은 후에는 이를 클래스로 캡슐화 해야한다.
이 예제에서 변화되면서 문제를 발생시키는 요인은 로봇의 "이동 방식"과 "공격 방식"의 변화다. 즉, 새로운 방식의 이동 및 공격이
계속해서 추가될 수 있으므로 기존의 로봇이나 새로운 로봇이 이러한 기능을 별다른 코드 변경 없이 제공받거나
기존의 공격이나 이동 방식을 다른 공격이나 이동 방식으로 쉽게 변경할 수 있어야 한다.

변화하는 것 - 이동 기능, 공격 기능
이 두가지를 Interface로 만들어서 새로운 이동, 공격 기존 방식의 중복코드 생성이 없게 캡슐화 한다.
이렇게 하면 이들 기능을 이용하는 로봇 객체와 상관없이 향후 추가될 이동, 공격 방식 변화뿐 아니라 현재 변화도 잘 처리할수 있다.
예를 들어 새로운 공격 방식이 개발되어 현재 로봇에 제공하더라도 공격 인터페이스가 변화에 대한 일종의 방화벽 역할을 수행해
Robot 클래스의 변경을 차단해준다. 즉, 새로운 기능의 추가(새로운 공격 기능)가 기존의 코드에 영향을 미치지 못하게 하므로
"OCP"를 만족하는 설계가 된다.
package PracticeV2 에서 구현하겠다.
 */

public class Client {
    public static void main(String[] args) {
        Robot teakwonV = new TaekwonV("TeakwonV");
        Robot atom = new Atom("Atom");

        System.out.println("내 이름은 " + teakwonV.getName());
        teakwonV.move();
        teakwonV.attack();

        System.out.println("내 이름은 "  + atom.getName());
        atom.move();
        atom.attack();
    }
}
